#!/usr/bin/env node
const { Command } = require('commander');
const path = require('path');
const fs = require('fs');
const cleaner = require('../lib/cleaner');

const program = new Command();
program
  .name('log-cleaner')
  .description('Clean up debug logs (console.log, print, etc.) from source files')
  .version('1.0.0')
  .option('--path <dir>', 'Target file or folder')
  .option('--mode <comment|delete>', 'Choose cleaning mode')
  .option('--ext <extensions>', 'File extensions to scan (comma-separated)')
  .option('--dry-run', 'Preview changes without editing files')
  .option('--report', 'Generate cleanup report')
  .option('--logger-pattern <pattern>', 'Custom regex to match log lines')
  .option('--backup', 'Create backup before making changes')
  .option('--diff', 'Show Git-style preview diffs (for dry-run only)');

program.parse(process.argv);
const cliOptions = program.opts();

// üßæ Load config file if it exists
let configOptions = {};
const configPath = path.resolve('.logcleanerrc.json');
if (fs.existsSync(configPath)) {
  try {
    const rawConfig = fs.readFileSync(configPath, 'utf8');
    configOptions = JSON.parse(rawConfig);
    console.log(`üõ†Ô∏è Loaded config from .logcleanerrc.json`);
  } catch (error) {
    console.error(`‚ùå Failed to load config file: ${error.message}`);
  }
}

// üß™ Merge config and CLI options ‚Äî CLI takes precedence
const mergedOptions = {
  path: cliOptions.path || configOptions.path || '.',
  mode: cliOptions.mode || configOptions.mode || 'comment',
  ext: cliOptions.ext
    ? cliOptions.ext.split(',')
    : configOptions.ext || ['.js'],
  dryRun: cliOptions.dryRun || configOptions.dryRun || false,
  report: cliOptions.report || configOptions.report || false,
  loggerPattern: cliOptions.loggerPattern || configOptions.loggerPattern,
  backup: cliOptions.backup || configOptions.backup || false,
  diff: cliOptions.diff || configOptions.diff || false
};

// üî• Run cleaner
cleaner.run(mergedOptions);
